{
  "entities": [
    [
      [
        13,
        16
      ],
      [
        88,
        91
      ],
      [
        126,
        153
      ],
      [
        7481,
        7484
      ],
      [
        7555,
        7582
      ]
    ],
    [
      [
        215,
        234
      ],
      [
        236,
        244
      ],
      [
        297,
        300
      ],
      [
        2598,
        2605
      ]
    ],
    [
      [
        419,
        452
      ],
      [
        467,
        474
      ],
      [
        482,
        496
      ],
      [
        5950,
        5971
      ]
    ],
    [
      [
        518,
        523
      ],
      [
        708,
        723
      ],
      [
        985,
        1021
      ]
    ],
    [
      [
        581,
        582
      ],
      [
        1456,
        1459
      ],
      [
        3054,
        3057
      ],
      [
        4522,
        4523
      ],
      [
        6569,
        6573
      ]
    ],
    [
      [
        843,
        890
      ],
      [
        894,
        897
      ]
    ],
    [
      [
        966,
        990
      ],
      [
        1521,
        1528
      ]
    ],
    [
      [
        1001,
        1007
      ],
      [
        2322,
        2336
      ],
      [
        2455,
        2461
      ],
      [
        3248,
        3255
      ],
      [
        4391,
        4397
      ],
      [
        6061,
        6068
      ],
      [
        6749,
        6755
      ],
      [
        6792,
        6798
      ],
      [
        7370,
        7377
      ]
    ],
    [
      [
        1025,
        1055
      ],
      [
        1093,
        1105
      ],
      [
        1585,
        1609
      ]
    ],
    [
      [
        1058,
        1076
      ],
      [
        1317,
        1329
      ],
      [
        1480,
        1495
      ],
      [
        1497,
        1515
      ],
      [
        3333,
        3344
      ],
      [
        3668,
        3686
      ],
      [
        3944,
        3962
      ],
      [
        4031,
        4049
      ],
      [
        5738,
        5756
      ],
      [
        6225,
        6243
      ],
      [
        6391,
        6396
      ],
      [
        6478,
        6483
      ]
    ],
    [
      [
        1577,
        1585
      ],
      [
        1634,
        1642
      ],
      [
        1674,
        1682
      ],
      [
        2519,
        2527
      ],
      [
        2734,
        2742
      ],
      [
        2808,
        2815
      ],
      [
        2841,
        2845
      ],
      [
        2853,
        2855
      ],
      [
        2973,
        2976
      ],
      [
        3034,
        3042
      ],
      [
        3167,
        3170
      ],
      [
        3747,
        3755
      ],
      [
        3807,
        3815
      ],
      [
        6301,
        6309
      ]
    ],
    [
      [
        1624,
        1642
      ],
      [
        2508,
        2527
      ],
      [
        2638,
        2647
      ],
      [
        2654,
        2656
      ],
      [
        2723,
        2742
      ],
      [
        3736,
        3755
      ]
    ],
    [
      [
        1663,
        1682
      ],
      [
        1772,
        1782
      ],
      [
        2140,
        2156
      ],
      [
        2200,
        2210
      ]
    ],
    [
      [
        1844,
        1864
      ]
    ],
    [
      [
        1981,
        1982
      ],
      [
        2031,
        2040
      ],
      [
        2386,
        2406
      ]
    ],
    [
      [
        2109,
        2156
      ],
      [
        2166,
        2169
      ]
    ],
    [
      [
        2170,
        2184
      ],
      [
        2247,
        2253
      ],
      [
        2366,
        2372
      ]
    ],
    [
      [
        2868,
        2885
      ],
      [
        3093,
        3111
      ]
    ],
    [
      [
        2940,
        2964
      ],
      [
        3643,
        3667
      ]
    ],
    [
      [
        3023,
        3042
      ],
      [
        3126,
        3129
      ]
    ],
    [
      [
        3258,
        3273
      ],
      [
        6971,
        6988
      ],
      [
        7047,
        7066
      ],
      [
        7164,
        7194
      ]
    ],
    [
      [
        3403,
        3418
      ],
      [
        3420,
        3435
      ],
      [
        6611,
        6618
      ]
    ],
    [
      [
        3552,
        3559
      ],
      [
        3566,
        3568
      ]
    ],
    [
      [
        4132,
        4138
      ],
      [
        4177,
        4184
      ],
      [
        4710,
        4717
      ]
    ],
    [
      [
        4211,
        4218
      ],
      [
        4466,
        4474
      ]
    ],
    [
      [
        4399,
        4400
      ]
    ],
    [
      [
        4407,
        4411
      ],
      [
        4538,
        4542
      ]
    ],
    [
      [
        4422,
        4430
      ],
      [
        4559,
        4567
      ],
      [
        4577,
        4585
      ]
    ],
    [
      [
        5257,
        5261
      ],
      [
        5344,
        5348
      ]
    ],
    [
      [
        5264,
        5271
      ],
      [
        5353,
        5360
      ]
    ],
    [
      [
        5307,
        5316
      ],
      [
        5322,
        5325
      ]
    ],
    [
      [
        5514,
        5527
      ],
      [
        5542,
        5566
      ],
      [
        5618,
        5620
      ]
    ],
    [
      [
        5780,
        5796
      ],
      [
        6549,
        6564
      ]
    ],
    [
      [
        6095,
        6114
      ],
      [
        6914,
        6933
      ]
    ],
    [
      [
        6495,
        6512
      ],
      [
        6520,
        6524
      ]
    ],
    [
      [
        7223,
        7234
      ],
      [
        7322,
        7339
      ]
    ]
  ],
  "includes": [
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    []
  ],
  "text": "\n\nЗаметки об NLP (часть 3) / Habr\n\n\n              1  January  2010 at 18:26  Заметки об NLP (часть 3) Artificial Intelligence Natural Language Processing *      (Начало: 1, 2) Что ж, подходим к самому интересному — разбору предложений. Тема эта многогранна и многоуровнева, так что подступиться к ней не очень просто. Но ведь трудности лишь закаляют :) Да и выходные, текст пишется легко…\n\nНачнём с такого понятия, как синтаксический анализ предложений (по-английски parsing). Суть этого процесса состоит в построении графа, «каким-либо образом» отражающего структуру предложения.\nЯ говорю «каким-либо образом» потому, что на сегодня не существует единственно принятой системы принципов, на которых строится упомянутый граф. Даже в рамках одной концепции взгляды отдельных учёных на зависимости между словами могут различаться (это напоминает разногласия в трактовке морфологических явлений, о чём шла речь в предыдущей части).\n\nНаверно, прежде всего надо разделить способы построения графа (обычно — дерева) зависимостей на phrase structure-based parsing и dependency parsing.\n\nПредставители первой школы разделяют предложение на «составляющие», далее каждая составляющая разбивается на свои составляющие — и так до тех пор, пока не дойдём до слов. Эту идею хорошо иллюстрирует рисунок из Википедии:\n\n\nПредставители второй школы соединяют зависящие друг от друга слова между собой непосредственно, без каких-либо вспомогательных узлов:\n\n\nСразу скажу, что мои симпатии на стороне второго подхода (dependency parsing), но оба они заслуживают более детального обсуждения.\n\nШкола ХомскогоРазбор «по составляющим» явно вырос из грамматик Хомского. Если кто не знает, грамматика Хомского представляет собой способ задания правил, описывающих предложения языка. С помощью такой грамматики можно как генерировать фразы, так и анализировать. Например, следующая грамматика описывает «язык», состоящий из произвольного количества букв a, за которым следует произвольное количество букв b:\n\nS -> aS | bA | 'empty'\nA -> bA | 'empty'\n\nНачав с символа S, можно сгенерировать любую строку вида a...ab...b. Существует также универсальный алгоритм разбора такой грамматики. Скормив ему входную строку и набор правил грамматики, можно получить ответ — является ли строка корректной строкой в рамках данного языка или нет. Можно получить и дерево разбора, показывающее, каким образом строка выводится из начального символа S.\n\nДопустим, строке aabb соответствует вот такое дерево:\n\n\nЯвный плюс этого метода состоит в том, что грамматики Хомского — формализм давно известный. Существуют давно разработанные алгоритмы разбора, известны «формальные свойства» грамматик, т.е. их выразительные способности, сложность обработки и т.п. Кроме того, грамматики Хомского успешно применяются при компиляции языков программирования.\n\nСам Хомский прежде всего лингвист, и свои работы он примерял на естественный язык, английский, в первую очередь. Поэтому в англоязычной компьютерной лингвистике влияние его трудов достаточно велико. Хотя «в лоб» сейчас формализмы Хомского, насколько мне известно, при обработке текстов на естественном языке не применяют (они недостаточно развиты для этого), дух его школы живёт.\n\nХороший пример синтаксического анализатора, строящего подобные деревья — Stanford parser (есть онлайн-демо).\n\nМодель отношений между словами\nВообще этот подход тоже трудно назвать особо свежим. Все ссылаются на работы Люсьена Теньера (Lucien Tesniere) пятидесятых годов как на первоисточник. Упоминают и более ранние мысли (но из той же оперы, что называть отцом ООП Платона, т.к. он ввёл в оборот понятие «мира идей», то есть абстрактных классов). Однако в компьютерной лингвистике dependency parsing долгое время был на втором плане, в то время как грамматики Хомского активно применялись. Вероятно, ограничения подхода Хомского особенно больно ударили по языкам с более свободным (чем в английском) порядком слов, поэтому самые интересные работы в области dependency parsing до сих пор выполняются «снаружи» англоязычного мира.\n\nОсновная идея dependency parsing — соединять между собой зависимые слова. Центром практически любой фразы является глагол (явный или подразумеваемый). Далее от глагола (действия) можно задавать вопросы: кто делает, что делает, где делает и так далее. Для присоединённых сущностей тоже можно задать вопросы (в первую очередь, вопрос «какой»). Например, для приведённого выше дерева «я купил кофе в большом магазине» можно воспроизвести такую цепочку вопросов. Корень — купил (действие фразы). Кто купил? — Я. Что купил? — Кофе. Где купил? — В магазине. В каком магазине? — В большом.\n\nЗдесь тоже есть множество технических тонкостей и неоднозначностей. Можно по-разному обрабатывать отсутствие глагола. Обычно всё равно подразумевается глагол «to be»: «Я [есть] студент». В предикативных предложениях дело обстоит сложнее: На улице сыро. Не скажешь же, что на улице есть сыро :) Не всегда понятно, что от чего зависит, и как это трактовать. Например, «я не пойду сегодня на работу». Как соотносится с прочими словами частица «не»? Как вариант, можно считать, что здесь используется глагол «недеяния» «не_пойду» (пусть в русском такого нет, но по смыслу подходит). Не совсем понятно, как лепить однородные члены, соединённые союзом. «Я купил кофе и булочку». Например, можно лепить к «купил» слово «и», а к «и» присоединять уже «кофе» и «булочку». Но есть и другие подходы. Довольно тонкий момент возникает при взаимодействии слов, образующих некое единство: «я буду ходить на работу». Понятно, что «буду ходить» — это по сути один-единственный глагол (то есть действие) будущего времени, просто создан он двумя словами.\n\nЕсли хочется посмотреть на такой анализатор в действии — могу посоветовать сайт фирмы Connexor.\n\nЧем dependency parsing притягателен? Приводят разные аргументы. Например, говорится, что соединяя между собой слова, мы не создаём дополнительных сущностей, и, стало быть, упрощаем дальнейший анализ. В конце концов, синтаксический анализ — это лишь очередной этап обработки текста, и дальше надо представлять, что с полученным деревом делать. В каком-то смысле дерево зависимостей «чище», ибо показывает явные семантические связи между элементами предложения. Далее, нередко утверждают, что dependency parsing больше подходит для языков со свободным порядком слов. У Хомского все зависимые блоки так или иначе действительно оказываются рядом друг с другом. Здесь же в теории можно иметь связи между словами на разных концах предложения (хотя и здесь технически не так всё просто, но об этом позже). В принципе, уже этих аргументов для меня достаточно, чтобы примкнуть к лагерю Теньера :)\n\nНадо сказать, что существуют формальные доказательства близости получающихся деревьев. Где-то проскакивала теорема о том, что дерево одного вида можно сконвертировать в дерево другого вида и наоборот. Но на практике это не работает. По крайней мере, на моей памяти никто не пытался получить дерево зависимостей путём преобразования выходных данных Stanford parser'а. Видимо, не всё так просто, да и ошибки множатся… сначала стэнфордский парсер ошибётся, потом алгоритм конвертации ошибётся… и что получится в конце? Ошибка на ошибке.\n\n(UPD: упомянутые ребята из Стэнфорда всё же протестировали метод конвертации выходных данных своего парсера в dependency-структуры. Однако должен заметить, что при такой конвертации получаются только проективные деревья, речь о которых идёт в пятой части).\nНаверно, на сегодня хватит. Продолжим в следующей части.    Tags: NLPобработка текстовкомпьютерная лингвистика Hubs: Artificial IntelligenceNatural Language Processing          \n\n\n"
}
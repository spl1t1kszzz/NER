{
  "entities": [
    [
      [
        10,
        32
      ],
      [
        110,
        132
      ],
      [
        383,
        404
      ],
      [
        973,
        995
      ],
      [
        4000,
        4007
      ],
      [
        4515,
        4521
      ],
      [
        4523,
        4530
      ],
      [
        6194,
        6200
      ],
      [
        6436,
        6443
      ],
      [
        7182,
        7188
      ],
      [
        7239,
        7241
      ],
      [
        7256,
        7259
      ],
      [
        7697,
        7704
      ],
      [
        7888,
        7896
      ],
      [
        7939,
        7947
      ],
      [
        8452,
        8458
      ],
      [
        9577,
        9583
      ],
      [
        9758,
        9765
      ],
      [
        9805,
        9808
      ],
      [
        9948,
        9954
      ],
      [
        10168,
        10182
      ],
      [
        10388,
        10398
      ],
      [
        11033,
        11044
      ],
      [
        11119,
        11127
      ],
      [
        11202,
        11209
      ],
      [
        14193,
        14200
      ],
      [
        14862,
        14869
      ],
      [
        15868,
        15875
      ],
      [
        16246,
        16252
      ],
      [
        16254,
        16261
      ],
      [
        16313,
        16315
      ],
      [
        18456,
        18479
      ],
      [
        20895,
        20918
      ],
      [
        24434,
        24440
      ],
      [
        24456,
        24462
      ],
      [
        25824,
        25847
      ],
      [
        26368,
        26389
      ],
      [
        30245,
        30268
      ],
      [
        32045,
        32052
      ],
      [
        32886,
        32893
      ]
    ],
    [
      [
        37,
        51
      ],
      [
        137,
        151
      ],
      [
        418,
        432
      ],
      [
        2078,
        2092
      ],
      [
        2309,
        2323
      ],
      [
        4264,
        4277
      ],
      [
        7127,
        7139
      ],
      [
        7312,
        7326
      ],
      [
        7705,
        7723
      ],
      [
        7901,
        7909
      ],
      [
        8099,
        8113
      ],
      [
        9588,
        9602
      ],
      [
        10200,
        10214
      ],
      [
        10242,
        10256
      ],
      [
        12143,
        12157
      ],
      [
        12380,
        12394
      ],
      [
        14100,
        14114
      ],
      [
        17989,
        18003
      ],
      [
        18316,
        18330
      ],
      [
        26288,
        26302
      ],
      [
        27742,
        27756
      ],
      [
        29448,
        29461
      ],
      [
        30184,
        30198
      ],
      [
        30340,
        30354
      ],
      [
        30543,
        30555
      ],
      [
        32540,
        32554
      ]
    ],
    [
      [
        241,
        245
      ],
      [
        252,
        266
      ],
      [
        268,
        269
      ],
      [
        33247,
        33252
      ]
    ],
    [
      [
        358,
        361
      ],
      [
        444,
        446
      ],
      [
        636,
        638
      ],
      [
        2198,
        2201
      ],
      [
        2490,
        2492
      ],
      [
        3476,
        3479
      ],
      [
        3624,
        3626
      ],
      [
        3897,
        3900
      ],
      [
        3934,
        3939
      ],
      [
        3989,
        3993
      ],
      [
        4009,
        4011
      ],
      [
        4021,
        4025
      ],
      [
        4486,
        4488
      ],
      [
        5709,
        5712
      ],
      [
        5749,
        5751
      ],
      [
        6046,
        6048
      ],
      [
        6093,
        6096
      ],
      [
        6117,
        6119
      ],
      [
        6568,
        6570
      ],
      [
        6682,
        6687
      ],
      [
        6974,
        6976
      ],
      [
        8008,
        8011
      ],
      [
        8227,
        8231
      ],
      [
        8245,
        8247
      ],
      [
        8285,
        8287
      ],
      [
        9334,
        9336
      ],
      [
        9488,
        9496
      ],
      [
        9559,
        9562
      ],
      [
        9634,
        9637
      ],
      [
        9912,
        9915
      ],
      [
        9944,
        9947
      ],
      [
        10259,
        10262
      ],
      [
        10363,
        10365
      ],
      [
        10437,
        10440
      ],
      [
        10567,
        10569
      ],
      [
        10758,
        10762
      ],
      [
        10768,
        10770
      ],
      [
        10802,
        10807
      ],
      [
        10963,
        10965
      ],
      [
        11045,
        11047
      ],
      [
        11150,
        11153
      ],
      [
        11168,
        11171
      ],
      [
        11350,
        11352
      ],
      [
        11551,
        11554
      ],
      [
        11691,
        11693
      ],
      [
        11730,
        11733
      ],
      [
        12024,
        12026
      ],
      [
        12711,
        12713
      ],
      [
        12831,
        12834
      ],
      [
        14884,
        14887
      ],
      [
        14931,
        14933
      ],
      [
        15574,
        15576
      ],
      [
        15632,
        15636
      ],
      [
        15938,
        15940
      ],
      [
        16009,
        16011
      ],
      [
        16234,
        16236
      ],
      [
        16279,
        16283
      ],
      [
        16532,
        16534
      ],
      [
        16841,
        16843
      ],
      [
        16989,
        16991
      ],
      [
        17291,
        17293
      ],
      [
        17466,
        17471
      ],
      [
        17525,
        17527
      ],
      [
        18675,
        18678
      ],
      [
        18695,
        18698
      ],
      [
        18780,
        18782
      ],
      [
        19043,
        19046
      ],
      [
        19346,
        19348
      ],
      [
        19594,
        19597
      ],
      [
        20333,
        20336
      ],
      [
        20944,
        20947
      ],
      [
        21291,
        21294
      ],
      [
        23235,
        23237
      ],
      [
        23417,
        23419
      ],
      [
        23560,
        23562
      ],
      [
        23693,
        23695
      ],
      [
        23746,
        23748
      ],
      [
        23933,
        23935
      ],
      [
        23945,
        23949
      ],
      [
        24077,
        24080
      ],
      [
        24134,
        24136
      ],
      [
        24300,
        24302
      ],
      [
        24374,
        24376
      ],
      [
        24423,
        24425
      ],
      [
        24585,
        24587
      ],
      [
        24658,
        24661
      ],
      [
        24789,
        24791
      ],
      [
        24846,
        24849
      ],
      [
        24929,
        24931
      ],
      [
        25099,
        25102
      ],
      [
        25605,
        25607
      ],
      [
        25713,
        25715
      ],
      [
        25909,
        25911
      ],
      [
        26147,
        26150
      ],
      [
        26334,
        26336
      ],
      [
        26408,
        26410
      ],
      [
        26522,
        26524
      ],
      [
        26613,
        26615
      ],
      [
        26684,
        26687
      ],
      [
        26804,
        26806
      ],
      [
        27253,
        27255
      ],
      [
        27795,
        27797
      ],
      [
        27954,
        27960
      ],
      [
        27976,
        27978
      ],
      [
        28028,
        28031
      ],
      [
        28230,
        28233
      ],
      [
        28236,
        28240
      ],
      [
        28321,
        28323
      ],
      [
        28638,
        28640
      ],
      [
        29141,
        29143
      ],
      [
        29668,
        29670
      ],
      [
        29823,
        29826
      ],
      [
        29924,
        29926
      ],
      [
        30443,
        30445
      ],
      [
        30672,
        30674
      ],
      [
        30734,
        30737
      ],
      [
        31058,
        31061
      ],
      [
        31143,
        31145
      ],
      [
        31191,
        31193
      ],
      [
        31472,
        31474
      ],
      [
        31715,
        31717
      ],
      [
        31891,
        31893
      ],
      [
        31964,
        31968
      ],
      [
        32003,
        32005
      ],
      [
        32225,
        32227
      ],
      [
        32408,
        32410
      ],
      [
        32932,
        32934
      ]
    ],
    [
      [
        466,
        476
      ],
      [
        793,
        803
      ],
      [
        883,
        893
      ],
      [
        10403,
        10413
      ],
      [
        10451,
        10461
      ],
      [
        14089,
        14099
      ],
      [
        17055,
        17065
      ],
      [
        19779,
        19789
      ],
      [
        20875,
        20885
      ],
      [
        23789,
        23799
      ],
      [
        23831,
        23841
      ],
      [
        25481,
        25491
      ],
      [
        25663,
        25673
      ],
      [
        25768,
        25778
      ],
      [
        25866,
        25876
      ],
      [
        26000,
        26010
      ]
    ],
    [
      [
        479,
        490
      ],
      [
        661,
        672
      ],
      [
        6377,
        6388
      ],
      [
        6533,
        6544
      ],
      [
        7105,
        7124
      ],
      [
        8583,
        8594
      ],
      [
        8698,
        8717
      ],
      [
        11919,
        11930
      ],
      [
        20627,
        20638
      ],
      [
        25986,
        25997
      ],
      [
        26760,
        26771
      ],
      [
        27023,
        27034
      ],
      [
        32717,
        32728
      ]
    ],
    [
      [
        507,
        522
      ],
      [
        533,
        535
      ]
    ],
    [
      [
        1091,
        1114
      ],
      [
        1327,
        1350
      ],
      [
        1352,
        1365
      ],
      [
        1498,
        1521
      ],
      [
        2351,
        2374
      ],
      [
        3259,
        3282
      ],
      [
        4237,
        4260
      ],
      [
        11999,
        12022
      ],
      [
        32499,
        32522
      ]
    ],
    [
      [
        1117,
        1157
      ],
      [
        1790,
        1830
      ],
      [
        1843,
        1845
      ],
      [
        2035,
        2048
      ],
      [
        2122,
        2125
      ]
    ],
    [
      [
        1296,
        1307
      ],
      [
        1395,
        1406
      ]
    ],
    [
      [
        1433,
        1439
      ],
      [
        2025,
        2031
      ],
      [
        2544,
        2556
      ],
      [
        2594,
        2598
      ],
      [
        2621,
        2624
      ]
    ],
    [
      [
        1442,
        1451
      ],
      [
        1550,
        1559
      ],
      [
        1635,
        1645
      ],
      [
        3028,
        3037
      ],
      [
        4342,
        4351
      ],
      [
        29489,
        29498
      ]
    ],
    [
      [
        1473,
        1483
      ],
      [
        1570,
        1582
      ],
      [
        1587,
        1598
      ],
      [
        3431,
        3441
      ],
      [
        4330,
        4340
      ],
      [
        29212,
        29219
      ],
      [
        29476,
        29486
      ]
    ],
    [
      [
        1484,
        1490
      ],
      [
        1949,
        1955
      ],
      [
        28172,
        28178
      ]
    ],
    [
      [
        1614,
        1625
      ],
      [
        1719,
        1730
      ]
    ],
    [
      [
        1626,
        1631
      ],
      [
        1941,
        1946
      ]
    ],
    [
      [
        1661,
        1678
      ],
      [
        1691,
        1709
      ]
    ],
    [
      [
        1679,
        1685
      ],
      [
        1710,
        1716
      ],
      [
        1977,
        1983
      ]
    ],
    [
      [
        1731,
        1740
      ],
      [
        1986,
        1995
      ]
    ],
    [
      [
        1870,
        1881
      ],
      [
        1912,
        1918
      ],
      [
        2161,
        2167
      ]
    ],
    [
      [
        2053,
        2077
      ],
      [
        2285,
        2308
      ],
      [
        5040,
        5064
      ],
      [
        6260,
        6284
      ],
      [
        11974,
        11982
      ],
      [
        14367,
        14389
      ],
      [
        16828,
        16836
      ],
      [
        17723,
        17745
      ],
      [
        32458,
        32482
      ],
      [
        32986,
        32994
      ],
      [
        33050,
        33074
      ],
      [
        33175,
        33197
      ]
    ],
    [
      [
        2450,
        2469
      ],
      [
        2652,
        2671
      ],
      [
        2707,
        2722
      ],
      [
        3130,
        3149
      ],
      [
        3184,
        3190
      ],
      [
        3784,
        3790
      ],
      [
        30693,
        30714
      ]
    ],
    [
      [
        2816,
        2825
      ],
      [
        2876,
        2889
      ],
      [
        2962,
        2975
      ],
      [
        3005,
        3025
      ],
      [
        3042,
        3046
      ]
    ],
    [
      [
        2847,
        2851
      ],
      [
        2928,
        2931
      ],
      [
        3191,
        3196
      ],
      [
        3493,
        3498
      ]
    ],
    [
      [
        3367,
        3377
      ],
      [
        3446,
        3456
      ]
    ],
    [
      [
        3547,
        3552
      ],
      [
        3554,
        3557
      ],
      [
        3589,
        3591
      ],
      [
        6641,
        6661
      ]
    ],
    [
      [
        3942,
        3971
      ],
      [
        4036,
        4065
      ],
      [
        4088,
        4091
      ],
      [
        4133,
        4155
      ],
      [
        4659,
        4681
      ],
      [
        5086,
        5116
      ],
      [
        7142,
        7164
      ],
      [
        9073,
        9095
      ],
      [
        22053,
        22075
      ]
    ],
    [
      [
        4099,
        4129
      ],
      [
        4971,
        4988
      ],
      [
        5286,
        5298
      ],
      [
        5674,
        5686
      ],
      [
        7726,
        7743
      ],
      [
        24713,
        24730
      ],
      [
        25062,
        25074
      ],
      [
        25170,
        25182
      ]
    ],
    [
      [
        4207,
        4215
      ],
      [
        4731,
        4738
      ],
      [
        4740,
        4747
      ],
      [
        30478,
        30485
      ],
      [
        32238,
        32246
      ]
    ],
    [
      [
        4217,
        4226
      ],
      [
        4944,
        4953
      ],
      [
        5158,
        5167
      ],
      [
        5645,
        5654
      ]
    ],
    [
      [
        4361,
        4371
      ],
      [
        4416,
        4419
      ]
    ],
    [
      [
        4431,
        4438
      ],
      [
        4440,
        4447
      ]
    ],
    [
      [
        4648,
        4681
      ],
      [
        4709,
        4714
      ],
      [
        4758,
        4760
      ],
      [
        4820,
        4823
      ]
    ],
    [
      [
        5029,
        5064
      ],
      [
        5419,
        5428
      ],
      [
        5515,
        5523
      ],
      [
        5557,
        5560
      ]
    ],
    [
      [
        5118,
        5130
      ],
      [
        5524,
        5537
      ],
      [
        5539,
        5546
      ],
      [
        24700,
        24712
      ]
    ],
    [
      [
        5209,
        5218
      ],
      [
        5246,
        5258
      ],
      [
        5321,
        5324
      ]
    ],
    [
      [
        5220,
        5233
      ],
      [
        5338,
        5350
      ]
    ],
    [
      [
        5236,
        5244
      ],
      [
        5564,
        5578
      ],
      [
        5629,
        5644
      ]
    ],
    [
      [
        5275,
        5298
      ],
      [
        5306,
        5309
      ],
      [
        5325,
        5329
      ],
      [
        5369,
        5380
      ],
      [
        5448,
        5457
      ],
      [
        5492,
        5495
      ],
      [
        5593,
        5603
      ]
    ],
    [
      [
        5330,
        5336
      ],
      [
        5618,
        5625
      ]
    ],
    [
      [
        5395,
        5403
      ],
      [
        5430,
        5438
      ],
      [
        7264,
        7272
      ]
    ],
    [
      [
        5689,
        5696
      ],
      [
        5804,
        5811
      ],
      [
        5919,
        5926
      ],
      [
        7046,
        7053
      ]
    ],
    [
      [
        5788,
        5795
      ],
      [
        5886,
        5893
      ],
      [
        6141,
        6148
      ],
      [
        30786,
        30793
      ],
      [
        30885,
        30893
      ]
    ],
    [
      [
        5804,
        5844
      ]
    ],
    [
      [
        5919,
        5957
      ],
      [
        7868,
        7871
      ],
      [
        26636,
        26647
      ]
    ],
    [
      [
        5996,
        6022
      ],
      [
        21263,
        21271
      ]
    ],
    [
      [
        6312,
        6317
      ],
      [
        6319,
        6326
      ]
    ],
    [
      [
        6371,
        6415
      ],
      [
        6468,
        6492
      ]
    ],
    [
      [
        6391,
        6415
      ],
      [
        8531,
        8555
      ],
      [
        32731,
        32755
      ]
    ],
    [
      [
        6593,
        6604
      ],
      [
        6668,
        6672
      ],
      [
        6717,
        6722
      ]
    ],
    [
      [
        6697,
        6716
      ],
      [
        7288,
        7306
      ],
      [
        7342,
        7356
      ],
      [
        7456,
        7462
      ],
      [
        8159,
        8177
      ],
      [
        10726,
        10734
      ],
      [
        32123,
        32143
      ]
    ],
    [
      [
        6822,
        6843
      ],
      [
        6896,
        6917
      ]
    ],
    [
      [
        7076,
        7085
      ],
      [
        8791,
        8801
      ],
      [
        9990,
        9999
      ],
      [
        10095,
        10099
      ],
      [
        11548,
        11550
      ],
      [
        11719,
        11728
      ],
      [
        17029,
        17038
      ],
      [
        20748,
        20758
      ],
      [
        24530,
        24539
      ],
      [
        25503,
        25512
      ],
      [
        28467,
        28476
      ]
    ],
    [
      [
        7118,
        7124
      ],
      [
        7399,
        7406
      ],
      [
        7426,
        7433
      ],
      [
        7619,
        7626
      ],
      [
        8711,
        8717
      ],
      [
        13265,
        13271
      ],
      [
        14347,
        14354
      ],
      [
        14605,
        14612
      ],
      [
        14640,
        14647
      ],
      [
        15618,
        15625
      ],
      [
        15981,
        15988
      ],
      [
        16003,
        16007
      ],
      [
        20722,
        20729
      ]
    ],
    [
      [
        7218,
        7229
      ],
      [
        7231,
        7238
      ]
    ],
    [
      [
        7561,
        7570
      ],
      [
        7596,
        7603
      ],
      [
        7631,
        7634
      ],
      [
        7826,
        7835
      ],
      [
        8137,
        8146
      ],
      [
        23064,
        23073
      ],
      [
        24038,
        24047
      ],
      [
        24049,
        24056
      ],
      [
        24124,
        24133
      ],
      [
        24752,
        24761
      ],
      [
        24901,
        24915
      ],
      [
        25000,
        25009
      ],
      [
        30866,
        30875
      ],
      [
        30935,
        30944
      ],
      [
        31872,
        31881
      ]
    ],
    [
      [
        7655,
        7664
      ],
      [
        7668,
        7675
      ]
    ],
    [
      [
        7755,
        7781
      ],
      [
        9215,
        9241
      ]
    ],
    [
      [
        7782,
        7788
      ],
      [
        7790,
        7797
      ]
    ],
    [
      [
        7877,
        7909
      ],
      [
        7923,
        7926
      ]
    ],
    [
      [
        8014,
        8018
      ],
      [
        21581,
        21583
      ],
      [
        22288,
        22290
      ],
      [
        22450,
        22453
      ],
      [
        22492,
        22494
      ],
      [
        22701,
        22704
      ],
      [
        22733,
        22735
      ],
      [
        27628,
        27630
      ],
      [
        33210,
        33215
      ]
    ],
    [
      [
        8372,
        8378
      ],
      [
        8947,
        8953
      ],
      [
        8985,
        8998
      ],
      [
        9134,
        9140
      ],
      [
        9242,
        9248
      ],
      [
        11882,
        11888
      ],
      [
        12041,
        12044
      ],
      [
        12186,
        12192
      ],
      [
        12985,
        12991
      ],
      [
        13508,
        13514
      ],
      [
        14249,
        14255
      ],
      [
        15237,
        15243
      ],
      [
        16363,
        16369
      ],
      [
        17306,
        17312
      ],
      [
        17636,
        17642
      ],
      [
        18120,
        18126
      ],
      [
        18480,
        18486
      ],
      [
        19365,
        19371
      ],
      [
        21361,
        21367
      ],
      [
        23522,
        23535
      ],
      [
        23626,
        23632
      ],
      [
        23762,
        23768
      ],
      [
        24441,
        24447
      ],
      [
        26542,
        26548
      ],
      [
        27006,
        27012
      ],
      [
        27246,
        27252
      ],
      [
        28852,
        28858
      ],
      [
        32655,
        32661
      ],
      [
        32663,
        32666
      ]
    ],
    [
      [
        8440,
        8449
      ],
      [
        8473,
        8476
      ],
      [
        8498,
        8507
      ],
      [
        8557,
        8559
      ],
      [
        8645,
        8648
      ],
      [
        8805,
        8814
      ],
      [
        9670,
        9679
      ],
      [
        11476,
        11485
      ],
      [
        11592,
        11595
      ],
      [
        24664,
        24673
      ],
      [
        26658,
        26667
      ],
      [
        26750,
        26759
      ],
      [
        27072,
        27081
      ],
      [
        27209,
        27218
      ],
      [
        27316,
        27325
      ],
      [
        27360,
        27363
      ]
    ],
    [
      [
        9377,
        9387
      ],
      [
        9488,
        9504
      ],
      [
        9684,
        9694
      ],
      [
        11138,
        11148
      ],
      [
        11790,
        11800
      ],
      [
        11857,
        11868
      ],
      [
        11870,
        11880
      ],
      [
        12220,
        12230
      ],
      [
        12423,
        12435
      ],
      [
        12905,
        12915
      ],
      [
        17961,
        17971
      ],
      [
        25921,
        25931
      ],
      [
        26953,
        26963
      ],
      [
        27039,
        27041
      ]
    ],
    [
      [
        9439,
        9459
      ],
      [
        9643,
        9656
      ],
      [
        11113,
        11127
      ],
      [
        11213,
        11219
      ]
    ],
    [
      [
        9863,
        9882
      ],
      [
        9892,
        9895
      ]
    ],
    [
      [
        10287,
        10314
      ],
      [
        10316,
        10323
      ],
      [
        12112,
        12138
      ],
      [
        20503,
        20531
      ],
      [
        26261,
        26287
      ]
    ],
    [
      [
        10487,
        10500
      ],
      [
        10553,
        10566
      ]
    ],
    [
      [
        10514,
        10520
      ],
      [
        10613,
        10619
      ],
      [
        10737,
        10743
      ],
      [
        10777,
        10779
      ],
      [
        10841,
        10843
      ]
    ],
    [
      [
        10595,
        10619
      ],
      [
        10631,
        10634
      ]
    ],
    [
      [
        10871,
        10882
      ],
      [
        11311,
        11331
      ]
    ],
    [
      [
        10982,
        10988
      ],
      [
        11002,
        11005
      ]
    ],
    [
      [
        11182,
        11188
      ],
      [
        11235,
        11241
      ],
      [
        18188,
        18194
      ],
      [
        21931,
        21937
      ]
    ],
    [
      [
        11891,
        11899
      ],
      [
        11901,
        11908
      ],
      [
        12738,
        12746
      ]
    ],
    [
      [
        12346,
        12360
      ],
      [
        12520,
        12532
      ]
    ],
    [
      [
        12547,
        12569
      ],
      [
        12575,
        12577
      ],
      [
        12662,
        12665
      ]
    ],
    [
      [
        13044,
        13090
      ],
      [
        13092,
        13099
      ]
    ],
    [
      [
        13112,
        13119
      ],
      [
        13148,
        13150
      ]
    ],
    [
      [
        13202,
        13208
      ],
      [
        13360,
        13366
      ],
      [
        17299,
        17305
      ],
      [
        17629,
        17635
      ],
      [
        17658,
        17660
      ],
      [
        17692,
        17698
      ],
      [
        23513,
        23519
      ],
      [
        32860,
        32867
      ]
    ],
    [
      [
        13211,
        13216
      ],
      [
        13218,
        13225
      ]
    ],
    [
      [
        13354,
        13359
      ],
      [
        13435,
        13446
      ]
    ],
    [
      [
        13467,
        13478
      ],
      [
        13889,
        13899
      ]
    ],
    [
      [
        13524,
        13536
      ],
      [
        13538,
        13545
      ],
      [
        13582,
        13584
      ]
    ],
    [
      [
        13565,
        13580
      ],
      [
        13799,
        13814
      ]
    ],
    [
      [
        13615,
        13623
      ],
      [
        13628,
        13636
      ]
    ],
    [
      [
        13637,
        13654
      ],
      [
        13702,
        13705
      ]
    ],
    [
      [
        13684,
        13689
      ],
      [
        14000,
        14004
      ],
      [
        14151,
        14155
      ],
      [
        18743,
        18748
      ],
      [
        29054,
        29059
      ]
    ],
    [
      [
        13770,
        13774
      ],
      [
        13776,
        13783
      ]
    ],
    [
      [
        13847,
        13856
      ],
      [
        13861,
        13868
      ]
    ],
    [
      [
        13903,
        14004
      ],
      [
        14019,
        14021
      ]
    ],
    [
      [
        14228,
        14247
      ]
    ],
    [
      [
        14262,
        14290
      ],
      [
        14292,
        14295
      ],
      [
        14392,
        14409
      ],
      [
        15014,
        15030
      ],
      [
        15185,
        15201
      ],
      [
        16052,
        16068
      ]
    ],
    [
      [
        14424,
        14429
      ],
      [
        14562,
        14567
      ],
      [
        14625,
        14630
      ],
      [
        14678,
        14683
      ],
      [
        14825,
        14829
      ],
      [
        15285,
        15290
      ],
      [
        27271,
        27276
      ]
    ],
    [
      [
        14451,
        14455
      ],
      [
        14571,
        14575
      ]
    ],
    [
      [
        14459,
        14478
      ],
      [
        14507,
        14509
      ]
    ],
    [
      [
        14587,
        14598
      ],
      [
        14713,
        14724
      ]
    ],
    [
      [
        14616,
        14630
      ],
      [
        14768,
        14776
      ]
    ],
    [
      [
        14633,
        14647
      ],
      [
        14668,
        14674
      ]
    ],
    [
      [
        14816,
        14822
      ],
      [
        15293,
        15298
      ],
      [
        15321,
        15327
      ],
      [
        15611,
        15617
      ],
      [
        15975,
        15980
      ]
    ],
    [
      [
        14893,
        14927
      ],
      [
        14958,
        14961
      ]
    ],
    [
      [
        15014,
        15037
      ],
      [
        15185,
        15210
      ],
      [
        16052,
        16076
      ],
      [
        16094,
        16096
      ]
    ],
    [
      [
        15147,
        15160
      ],
      [
        15211,
        15214
      ],
      [
        15254,
        15258
      ],
      [
        15511,
        15524
      ]
    ],
    [
      [
        15328,
        15337
      ],
      [
        15353,
        15356
      ]
    ],
    [
      [
        15469,
        15492
      ],
      [
        15537,
        15540
      ]
    ],
    [
      [
        15484,
        15492
      ],
      [
        15494,
        15501
      ]
    ],
    [
      [
        15907,
        15915
      ],
      [
        15930,
        15937
      ]
    ],
    [
      [
        15950,
        15972
      ],
      [
        16019,
        16035
      ],
      [
        16090,
        16093
      ]
    ],
    [
      [
        16402,
        16428
      ],
      [
        16749,
        16766
      ],
      [
        28077,
        28103
      ]
    ],
    [
      [
        16477,
        16487
      ],
      [
        17411,
        17421
      ]
    ],
    [
      [
        16498,
        16507
      ],
      [
        17433,
        17441
      ]
    ],
    [
      [
        17165,
        17222
      ],
      [
        17233,
        17250
      ]
    ],
    [
      [
        17331,
        17336
      ],
      [
        17357,
        17360
      ]
    ],
    [
      [
        18021,
        18038
      ],
      [
        18257,
        18263
      ],
      [
        18397,
        18400
      ],
      [
        18524,
        18530
      ],
      [
        18579,
        18581
      ],
      [
        19081,
        19087
      ],
      [
        20645,
        20651
      ],
      [
        21045,
        21051
      ],
      [
        21323,
        21329
      ],
      [
        22019,
        22025
      ],
      [
        23156,
        23162
      ],
      [
        23457,
        23463
      ],
      [
        23634,
        23640
      ],
      [
        24198,
        24204
      ],
      [
        25442,
        25448
      ],
      [
        26796,
        26802
      ],
      [
        26841,
        26847
      ],
      [
        26903,
        26909
      ],
      [
        31025,
        31031
      ]
    ],
    [
      [
        18139,
        18160
      ],
      [
        18205,
        18208
      ]
    ],
    [
      [
        18838,
        18853
      ],
      [
        19898,
        19913
      ],
      [
        20281,
        20296
      ]
    ],
    [
      [
        18868,
        18873
      ],
      [
        18933,
        18938
      ],
      [
        19001,
        19006
      ],
      [
        28203,
        28208
      ]
    ],
    [
      [
        18888,
        18893
      ],
      [
        18953,
        18958
      ],
      [
        19022,
        19027
      ]
    ],
    [
      [
        19102,
        19113
      ],
      [
        19380,
        19391
      ]
    ],
    [
      [
        19419,
        19429
      ],
      [
        19435,
        19438
      ]
    ],
    [
      [
        19643,
        19650
      ],
      [
        19887,
        19893
      ],
      [
        19947,
        19949
      ],
      [
        20100,
        20108
      ],
      [
        20325,
        20332
      ],
      [
        26852,
        26858
      ],
      [
        28836,
        28842
      ],
      [
        29420,
        29426
      ]
    ],
    [
      [
        19754,
        19763
      ],
      [
        19814,
        19816
      ],
      [
        19858,
        19867
      ],
      [
        20020,
        20029
      ],
      [
        22222,
        22231
      ],
      [
        23667,
        23676
      ],
      [
        24207,
        24216
      ],
      [
        25451,
        25460
      ],
      [
        31034,
        31044
      ]
    ],
    [
      [
        19915,
        19931
      ],
      [
        20224,
        20240
      ]
    ],
    [
      [
        20116,
        20123
      ],
      [
        20164,
        20167
      ]
    ],
    [
      [
        20407,
        20427
      ],
      [
        20433,
        20437
      ],
      [
        20473,
        20475
      ],
      [
        20582,
        20590
      ],
      [
        20601,
        20605
      ],
      [
        20618,
        20622
      ],
      [
        20689,
        20697
      ],
      [
        20840,
        20848
      ],
      [
        21010,
        21019
      ],
      [
        21066,
        21074
      ],
      [
        21116,
        21118
      ],
      [
        23678,
        23686
      ],
      [
        24237,
        24245
      ],
      [
        25262,
        25270
      ]
    ],
    [
      [
        20984,
        21007
      ],
      [
        21060,
        21062
      ]
    ],
    [
      [
        21371,
        21377
      ],
      [
        22028,
        22034
      ],
      [
        22036,
        22043
      ],
      [
        22100,
        22106
      ],
      [
        23466,
        23472
      ]
    ],
    [
      [
        21895,
        21918
      ],
      [
        21984,
        21987
      ],
      [
        22194,
        22200
      ],
      [
        22314,
        22326
      ],
      [
        23295,
        23310
      ]
    ],
    [
      [
        21921,
        21937
      ],
      [
        21939,
        21946
      ]
    ],
    [
      [
        22187,
        22200
      ],
      [
        22210,
        22212
      ],
      [
        22216,
        22231
      ],
      [
        22348,
        22350
      ],
      [
        22401,
        22403
      ],
      [
        23281,
        23294
      ],
      [
        23329,
        23332
      ]
    ],
    [
      [
        23083,
        23099
      ],
      [
        23163,
        23166
      ]
    ],
    [
      [
        23569,
        23582
      ],
      [
        23588,
        23595
      ]
    ],
    [
      [
        23617,
        23625
      ],
      [
        24500,
        24508
      ],
      [
        25634,
        25649
      ],
      [
        28843,
        28851
      ],
      [
        32667,
        32682
      ]
    ],
    [
      [
        23977,
        24001
      ],
      [
        24156,
        24180
      ],
      [
        24327,
        24335
      ],
      [
        24403,
        24411
      ]
    ],
    [
      [
        24870,
        24876
      ],
      [
        24883,
        24886
      ]
    ],
    [
      [
        26492,
        26512
      ],
      [
        26514,
        26521
      ]
    ],
    [
      [
        27163,
        27184
      ],
      [
        27186,
        27188
      ],
      [
        27292,
        27313
      ],
      [
        27815,
        27843
      ],
      [
        27887,
        27890
      ],
      [
        27925,
        27927
      ]
    ],
    [
      [
        27420,
        27429
      ],
      [
        27546,
        27548
      ]
    ],
    [
      [
        27464,
        27470
      ],
      [
        27502,
        27509
      ]
    ],
    [
      [
        28344,
        28357
      ],
      [
        28361,
        28368
      ]
    ],
    [
      [
        28402,
        28412
      ],
      [
        28488,
        28498
      ],
      [
        28693,
        28703
      ],
      [
        28750,
        28753
      ],
      [
        29741,
        29751
      ],
      [
        30062,
        30072
      ],
      [
        30082,
        30085
      ],
      [
        30384,
        30394
      ],
      [
        30430,
        30441
      ],
      [
        30446,
        30448
      ],
      [
        30512,
        30522
      ],
      [
        30571,
        30581
      ],
      [
        30769,
        30779
      ],
      [
        31098,
        31108
      ],
      [
        31117,
        31128
      ],
      [
        31176,
        31186
      ],
      [
        31298,
        31308
      ],
      [
        31377,
        31387
      ],
      [
        31566,
        31576
      ],
      [
        31638,
        31648
      ],
      [
        31677,
        31688
      ],
      [
        31770,
        31780
      ],
      [
        31933,
        31943
      ],
      [
        32973,
        32983
      ],
      [
        33033,
        33043
      ]
    ],
    [
      [
        28619,
        28626
      ],
      [
        29119,
        29126
      ],
      [
        29130,
        29132
      ],
      [
        29462,
        29469
      ],
      [
        29527,
        29534
      ],
      [
        29569,
        29576
      ],
      [
        29812,
        29819
      ],
      [
        29852,
        29854
      ]
    ],
    [
      [
        28649,
        28658
      ],
      [
        28677,
        28680
      ],
      [
        28754,
        28756
      ]
    ],
    [
      [
        28781,
        28817
      ],
      [
        28833,
        28835
      ]
    ],
    [
      [
        28788,
        28792
      ],
      [
        28804,
        28808
      ],
      [
        28941,
        28947
      ],
      [
        28989,
        28995
      ],
      [
        29062,
        29066
      ],
      [
        29076,
        29082
      ],
      [
        29199,
        29205
      ],
      [
        29353,
        29357
      ],
      [
        29370,
        29374
      ],
      [
        29390,
        29394
      ],
      [
        29406,
        29410
      ],
      [
        29618,
        29622
      ]
    ],
    [
      [
        30199,
        30207
      ],
      [
        30209,
        30216
      ]
    ],
    [
      [
        30272,
        30283
      ],
      [
        30356,
        30359
      ]
    ],
    [
      [
        30837,
        30844
      ],
      [
        30846,
        30853
      ]
    ],
    [
      [
        30959,
        30960
      ]
    ],
    [
      [
        30963,
        30970
      ]
    ],
    [
      [
        31087,
        31093
      ],
      [
        31311,
        31317
      ],
      [
        31405,
        31411
      ],
      [
        31550,
        31556
      ],
      [
        31707,
        31713
      ],
      [
        31907,
        31913
      ]
    ],
    [
      [
        31650,
        31664
      ],
      [
        31818,
        31835
      ]
    ],
    [
      [
        32100,
        32155
      ],
      [
        32157,
        32160
      ]
    ],
    [
      [
        32332,
        32355
      ],
      [
        32357,
        32364
      ]
    ],
    [
      [
        33294,
        33310
      ],
      [
        33377,
        33393
      ]
    ]
  ],
  "includes": [
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    [],
    []
  ],
  "text": "\n\nИзучаем синтаксические парсеры для русского языка / Habr\n\n\n               9  August  2018 at 09:00  Изучаем синтаксические парсеры для русского языка Сбер corporate blog Programming *Machine learning *Artificial Intelligence       Привет! Меня зовут Денис Кирьянов, я работаю в Сбербанке и занимаюсь проблемами обработки естественного языка (NLP). Однажды нам понадобилось выбрать синтаксический парсер для работы с русским языком. Для этого мы углубились в дебри морфологии и токенизации, протестировали разные варианты и оценили их применение. Делимся опытом в этом посте.\n\n\n\nПодготовка к отбору \n\nНачнём с основ: как все работает? Мы берем текст, проводим токенизацию и получаем некоторый массив псевдослов-токенов. Этапы дальнейшего анализа укладываются в пирамиду:\n\n\n\n\nНачинается все с морфологии — с анализа формы слова и его грамматических категорий (род, падеж и т.п.). На морфологии базируется синтаксис — взаимоотношения за рамками одного слова, между словами. Синтаксические парсеры, о которых пойдет речь, анализируют текст и выдают структуру зависимостей слов друг от друга.\n\nГрамматика зависимостей и грамматика непосредственных составляющих\n\nЕсть два основных подхода к синтаксическому анализу, которые в лингвистической теории существуют примерно на равных.\n\n\n\n\nВ первой строке предложение разобрано в рамках грамматики зависимостей. Этому подходу учат в школе. Каждое слово в предложении как-то связано с другими. «Мыла» — сказуемое, от которого зависит подлежащее «мама» (здесь грамматика зависимостей расходится со школьной, где сказуемое зависит от подлежащего). У подлежащего есть зависимое определение «моя». У сказуемого есть зависимое прямое дополнение «раму». А у прямого дополнения «раму» — определение «грязную».\n\n\nВо второй строке разбор идет в соответствии с грамматикой непосредственно составляющих. \n\nСогласно ей, предложение делится на группы слов (phrases). Слова внутри одной группы связаны теснее. Слова «моя» и «мама» связаны более тесно, «раму» и «грязную» — тоже. И есть еще отдельное «мыла».\n\n\nВторой подход для автоматического парсинга русского языка применим плохо, потому что в нем тесно связанные слова (члены одной группы) очень часто не стоят подряд. Нам пришлось бы объединять их странными скобками — через одно или два слова. Поэтому в автоматическом парсинге русского языка принято работать исходя из грамматики зависимостей. Это удобно еще и потому, что с таким «фреймворком» все знакомы по школе.\n\nДерево зависимостей\n\nНабор зависимостей мы можем перевести в древовидную структуру. Вершина — слово «мыла», некоторые слова напрямую зависят от него, некоторые зависят от его зависимых. Вот определение дерева зависимостей из учебника Мартина и Журафского:\n\nDependency tree is a directed graph that satisfies the following constraints:\n\n\nThere is a single designated root node that has no incoming arcs.\n\nWith the exception of the root node, each vertex has exactly one incoming arc.\n\nThere is a unique path from the root node to each vertex in V.\n\n\n\nЕсть верхнеуровневый узел — сказуемое. Из него можно дойти до любого слова. Каждое слово зависит от другого, но только от одного. Дерево зависимостей выглядит примерно так:\n\n\n\n\nВ этом дереве ребра подписаны некоторым особым типом синтаксического отношения. В грамматике зависимостей анализируют не только факт связи между словами, но и характер этой связи. Например, «is taken» — это почти одна глагольная форма, «inventory» — это подлежащее для «is taken». Соответственно, у нас от «is» есть ребро и в одну, и в другую сторону. Это не одинаковые связи, они носят разный характер, так что их надо различать.\n\n\nЗдесь и далее мы рассматриваем простые случаи, где члены предложения присутствуют, а не подразумеваются. Существуют структуры и отметки, позволяющие бороться с пропусками. В дереве появляется нечто, у чего нет поверхностного выражения — слова. Но это уже предмет другого исследования, а нам все-таки надо сосредоточиться на своем.\n\nПроект Universal Dependencies\n\nЧтобы облегчить себе выбор парсера, мы обратили свой взгляд на проект Universal Dependencies и недавно прошедшее в его рамках соревнование CoNLL Shared Task.\n\n\nUniversal Dependencies — это проект по унификации разметки синтаксических корпусов (трибанков) в рамках грамматики зависимостей. В русском языке количество типов синтаксических связей ограничено — подлежащее, сказуемое и т.д. В английском то же самое, но набор уже другой. Например, там появляется артикль, который тоже надо как-то маркировать. Если бы мы хотели написать волшебный парсер, который мог бы обрабатывать все языки, то довольно быстро уперлись бы в проблемы сопоставления разных грамматик. Героическим создателям Universal Dependencies удалось договориться между собой и разметить все корпусы, которые имелись в их распоряжении, в едином формате. Не очень важно, как именно они договорились, главное, что на выходе мы получили некий единообразный формат представления всей этой истории — более 100 трибанков для 60 языков.\n\n\nCoNLL Shared Task — это соревнование между разработчиками алгоритмов синтаксического парсинга, проводимое в рамках проекта Universal Dependencies. Организаторы берут некоторое количество трибанков и разбивают каждый из них на три части — обучающую, валидационную и тестовую. Первая часть предоставляется участникам соревнования, чтобы они обучили на ней свои модели. Вторая часть тоже используется участниками — чтобы после обучения оценить работу алгоритма. Обучение и оценку участники могут итеративно повторять. Потом они отдают свой лучший алгоритм организаторам, которые прогоняют его на тестовой части, закрытой для участников. Итоги работы моделей на тестовых частях трибанков — это и есть итоги соревнования.\n\nМетрики качества\n\nУ нас есть связи между словами и их типы. Мы можем оценивать, правильно ли нашли вершину слова — метрика UAS (Unlabeled attachment score). Или оценивать, правильно ли найдена как вершина, так и тип зависимости — метрика LAS (Labeled attachment score).\n\n\n\n\nКазалось бы, здесь напрашивается оценка точности (accuracy) — считаем, сколько раз мы попали из общего количества случаев. Если у нас есть 5 слов и для 4 мы правильно определили вершину, то получаем 80%.\n\n\nНо на самом деле оценить парсер в чистом виде проблематично. Разработчики, решающие задачи автоматического парсинга, часто берут на вход сырой текст, который в соответствии с пирамидой анализа проходит этапы токенизации и морфологического анализа. На качество работы парсера могут повлиять ошибки с этих более ранних этапов. В частности, это относится к процедуре токенизации — выделения слов. Если мы выделили неправильные слова-юниты, то уже не сможем корректно оценить синтаксические связи между ними — ведь в нашем исходном размеченном корпусе юниты были другие.\n\n\nПоэтому формулой оценки в данном случае является ф-мера, где точность (precision) — доля точных попаданий относительно общего числа предсказаний, а полнота — доля точных попаданий относительно числа связей в размеченных данных.\n\n\nКогда мы в дальнейшем будем приводить оценки, нужно помнить, что используемые метрики затрагивают не только синтаксис, но еще и качество разбиения на токены.\n\nРусский язык в Universal Dependencies\n\nДля того, чтобы парсер смог синтаксически размечать предложения, которых он еще не видел, ему для обучения нужно скормить размеченный корпус. Для русского языка есть несколько таких корпусов:\n\n\n\n\nВо втором столбце указано количество токенов — слов. Чем больше токенов, тем больше обучающий корпус и лучше итоговый алгоритм (если это хорошие данные). Очевидно, что все эксперименты проводятся на SynTagRus (разработка ИППИ РАН), в котором более миллиона токенов. На нем будут обучаться все алгоритмы, о которых пойдет речь дальше.\n\nПарсеры для русского языка в CoNLL Shared Task\n\nПо итогам соревнования прошлого года модели, которые обучались на одном и том же SynTagRus, достигли следующих показателей LAS:\n\n\n\n\nРезультаты парсеров для русского впечатляют — они лучше чем у парсеров для английского, французского и других более редких языков. Нам с вами очень повезло сразу по двум причинам. Во-первых, алгоритмы хорошо справляются с русским языком. Во-вторых, у нас есть SynTagRus — большой и размеченный корпус.\n\n\nКстати, уже прошло соревнование 2018 года, но свое исследование мы проводили весной этого года, так что мы опираемся на итоги дорожки прошлого года. Забегая вперед, заметим, что новая версия UDPipe (Future) оказалась еще выше в этом году.\n\n\nВ список не вошел Syntaxnet — парсер Google. Что с ним не так? Ответ прост: Syntaxnet начинался лишь с этапа морфологического анализа. Он брал готовую идеальную токенизацию, а уже поверх строил обработку. Поэтому оценивать его наравне с остальными нечестно — остальные делали разбиение на токены своими алгоритмами, и это могло ухудшить результаты на последующем этапе синтаксиса. У Syntaxnet образца 2017 года результат лучше, чем у всего списка выше, но проводить сравнение напрямую нечестно.\n\n\nВ таблицу попали две версии UDPipe, на 12 и 15 места. Разработкой этого парсера занимаются те же люди, которые принимали активное участие в самом проекте Universal Dependencies.\n\n\nПериодически появляются обновления UDPipe (несколько реже, кстати, обновляется и разметка корпусов). Так, уже после соревнования прошлого года UDPipe обновлялся (это были коммиты в еще не вышедшую версию 2.0; в дальнейшем для простоты мы будем грубо называть взятый нами коммит UDPipe 2.0, хотя строго говоря это не так); этих обновлений в таблице соревнования, разумеется, нет. Результат «нашего» коммита находится примерно в районе седьмого места.\n\n\n\n\nИтак, нам нужно выбрать парсер для русского языка. В качестве начальных данных у нас есть табличка выше с лидирующим Syntaxnet и с UDPipe 2.0 где-то на 7 месте.\n\nВыбираем модель\n\nДелаем просто: начинаем с парсера с самыми высокими показателями. Если с ним что-то не так, идем ниже. Что-то не так может быть по следующим критериям — может, они не идеальны, но нам подошли:\n\n\nСкорость работы. Наш парсер должен работать достаточно быстро. Синтаксис, разумеется, далеко не единственный модуль «под капотом» real-time системы, поэтому тратить на него больше десятка миллисекунд не стоит.\n\nКачество работы. Как минимум, самого парсера именно на данных русского языка. Требование очевидное. Для русского языка у нас есть достаточно хорошие морфологические анализаторы, которые могут встроиться в нашу пирамиду. Если мы сможем убедиться, что сам парсер без морфологии круто работает, то это нас устроит — морфологию подсунем потом.\n\nНаличие кода обучения и желательно модели в открытом доступе. При наличии кода обучения мы будем способны повторить результаты автора модели. Для этого они должны быть открыты. И, кроме того, нужно внимательно следить за условиями распространения корпусов и модели — придется ли нам, если мы будем их использовать в рамках своих алгоритмов, покупать лицензию на их использование?\n\nЗапуск без сверхусилий. Этот пункт очень субъективный, но важный. Что это значит? Это значит, что если мы три дня сидим и что-то запускаем, а оно не запускается, то выбрать этот парсер мы не сможем, даже если там будет идеальное качество.\n\n\n\nВсе, что в чарте парсеров было выше UDPipe 2.0, нам не подошло. У нас проект на Python, а некоторые парсеры из списка написаны не на Python. Чтобы имплементировать их в питонский проект, пришлось бы применить те самые сверхусилия. В других случаях мы сталкивались с закрытым исходным кодом, академическими, индустриальными разработками — в общем, не докопаешься.\n\n\nЗвездный Syntaxnet заслуживает отдельного рассказа про качество работы. Здесь же он нас не устроил по скорости работы. Время его ответа на какие-то простые, распространенные в чатах фразы составляет от 100 миллисекунд. Если мы столько будем тратить на синтаксис, нам не хватит времени ни на что другое. В то же самое время UDPipe 2.0 делает разбор предложения за ~3ms. В итоге выбор пал на UDPipe 2.0.\n\nUDPipe 2.0\n\nUDPipe — пайплайн, который обучается токенизации, лемматизации, морфологическому тэггингу и парсингу, основанному на грамматике зависимостей. Мы можем обучить его всему этому или чему-то отдельно. Например, сделать с ним еще один морфологический анализатор для русского языка. Или обучить и использовать UDPipe в качестве токенизатора.\n\n\nUDPipe 2.0 подробно задокументирован. Есть описание архитектуры, репозиторий с кодом обучения, мануал. Самое интересное — это готовые модели, в том числе и для русского языка. Качай и запускай. Также на этом ресурсе зарелизены подобранные для каждого языкового корпуса параметры обучения. Для каждой такой модели нужно порядка 60 параметров обучения, и с их помощью можно самостоятельно добиться таких же показателей качества, как в таблице. Они могут быть не оптимальны, но по крайней мере мы можем быть уверены, что пайплайн будет работать достаточно корректно. Кроме того, наличие такого референса позволяет нам спокойно поэкспериментировать с моделью самостоятельно.\n\nКак работает UDPipe 2.0\n\nСначала текст разделяется на предложения, а предложения — на слова. UDPipe делает все это сразу с помощью совместного модуля — нейронной сети (однослойной двухсторонней GRU), которая для каждого символа предсказывает, последний ли он в предложении или в слове.\n\n\nЗатем начинает работу теггер — штука, которая предсказывает морфологические свойства токена: в каком падеже слово стоит, в каком числе. По последним четырем символам каждого слова теггер генерирует гипотезы относительно части речи и морфологических тегов этого слова, а затем при помощи перцептрона отбирает лучший вариант.\n\n\nВ UDPipe есть еще лемматизатор, который подбирает для слов начальную форму. Он обучается примерно по тому же принципу, по которому не-носитель языка мог бы попытаться определить лемму незнакомого ему слова. Отрезаем приставку и конец слова, добавляем какой-нибудь «ть», который присутствует в начальной форме глагола и т.п. Так генерируются кандидаты, из которых наилучшего выбирает перцептрон.\n\n\nСхема морфологического тегирования (определение числа, падежа и всего остального) и предсказания лемм очень похожи. Их можно предсказывать вместе, но лучше раздельно — слишком уж богата морфология русского языка. Можно также подключить свой список лемм.\n\n\nПерейдем к самому интересному — к парсеру. Есть несколько архитектур dependency-парсеров. UDPipe — это transition-based архитектура: она работает быстро, за линейное время проходя по всем токенам один раз.\n\n\nСинтаксический парсинг в такой архитектуре начинается со стека (где в начале только root) и пустой конфигурации. Есть три дефолтных способа ее изменить:\n\n\nLeftArc — применим, если второй элемент стека не root. Сохраняет зависимость между токеном на верхушке стека и вторым токеном, а также выкидывает второй из стека.\n\nRightArc — то же самое, но зависимость строится в другую сторону, и отбрасывается верхушка.\n\nShift — переносит очередное слово из буфера в стек.\n\n\n\nНиже приведен пример работы парсера (источник). У нас есть фраза «book me the morning flight», и мы восстанавливаем связи в ней:\n\n\n\n\nВот что получается в итоге:\n\n\n\n\nУ классических transition-based parser возможны три операции, перечисленные выше: стрелка в одну сторону, стрелка в другую сторону и шифт. Есть еще операция Swap, в базовых архитектурах transition-based парсеров она не используется, но в UDPipe включена. Swap возвращает второй элемент стека в буфер, чтобы взять потом из буфера следующий (в случае если они разнесены). Это помогает пропустить некоторое количество слов и восстановить правильную связь.\n\n\nПо ссылке есть хорошая статья человека, который придумал операцию swap. Выделим из нее один момент: несмотря на то, что мы не один раз проходим по исходному буферу токенов (т.е. наше время уже не линейное), эти операции можно оптимизировать так, чтобы вернуть время очень близко к линейному. То есть перед нами не просто осмысленная с точки зрения языка операция, но еще и инструмент, не сильно замедляющий работу парсера.\n\n\nНа примере выше мы показали операции, в результате которых мы получаем некоторую конфигурацию — буфер токенов и связи между ними. Мы отдаем эту конфигурацию на текущем шаге transition-based парсеру, и с помощью нее он должен предсказать конфигурацию на следующем шаге. Сопоставляя входящие вектора и конфигурации на каждом шаге, модель обучается.\n\n\nИтак, мы отобрали парсер, который подходит под все наши критерии, и даже поняли, как он работает. Переходим к экспериментам.\n\nПроблемы UDPipe\n\nЗададим небольшое предложение: «Переведи маме сто рублей». Результат заставляет схватиться за голову.\n\n\n\n\n«Переведи» оказалось предлогом, но это вполне логично. Мы определяем грамматику словоформы по последним четырем символам. «Веди» — это что-то типа «посреди», так что выбор относительно логичен. С «мамой» поинтереснее: «мама» оказалась в предложном падеже и стала вершиной этого предложения.\n\n\nЕсли пытаться интерпретировать все, исходя из результатов парсинга, то мы получили бы что-то типа «посреди мамы (мамы кого? чья это мама?) сотни рублей». Не совсем то, что было в начале. Нужно как-то с этим бороться. И мы придумали, как.\n\n\nВ пирамиде анализа синтаксис строится поверх морфологии, на основании морфологических тегов. Вот хрестоматийный пример лингвиста Л.В. Щербы на этот счет:\n\n«Глокая куздра штеко будланула бокра и курдячит бокрёнка».\n\n\nАнализ этого предложения не вызывает проблем. Почему? Потому что мы, как теггер UDPipe, смотрим на конец слова и понимаем, к какой оно относится части речи и какая это форма. История с «переведи» в качестве предлога совершенно противоречит нашей интуиции, но оказывается логична в тот момент, когда мы пытаемся проделать то же самое с незнакомыми словами. Человек мог бы подумать точно так же.\n\n\nОценим теггер UDPipe отдельно. Если он нас не устроит, возьмем другой теггер — чтобы потом построить синтаксический парсинг поверх другой морфологической разметки.\n\nTagging from plain text (CoNLL17 F1 score)\n\n\ngold forms: 301639,\n\nupostag: 98.15%,\n\nxpostag: 99.89%,\n\nfeats: 93.97%,\n\nalltags: 93.44%,\n\nlemmas: 96.68%\n\n\n\nКачество морфологии UDPipe 2.0 неплохое. Но для русского языка достижимо лучше. Анализатор Mystem (разработка яндекса) в определении частей речи достигает лучших результатов, чем UDPipe. К тому же, остальные анализаторы сложнее имплементировать в python-проект, и они работают медленней при качестве, сопоставимом с Mystem. Кстати, сравнению морфологических анализаторов для русского языка посвящена пара интересных статей.\n\nМожно попробовать использовать его выходную морфологическую разметку в качестве входа для синтаксического парсера UDPipe. Но есть проблемы. Многие знают, что Mystem не полностью понимает морфологическую омонимию. Он знает, что в предложении «Мама мыла раму» слово «мыла» — от слова «мыть», а не от «мыло». Но нам этого мало. Еще нам нужно, чтобы в словах типа «директора», где лемма абсолютно очевидна (директор), мы понимали, какой это конкретно падеж. Это может быть:\n\n\n«нет директора» — родительный падеж единственного числа\n\n«я вижу директора» — т.е. винительный падеж единственного числа \n\n«это какие-то директора» — именительный падеж множественного числа (ударения-то у нас на письме нет)\n\n\n\nВ таких случаях Mystem честно отдает всю цепочку:\n\nm.analyze(\"нет директора\")\n\n[{'analysis': [{'lex': 'нет', 'gr': 'PART='}], 'text': 'нет'},\n\n{'text': ' '},\n\n{'analysis': [{'lex': 'директор', 'gr': 'S,муж,од=(вин,ед|род,ед|им,мн)'}],\n\n 'text': 'директора'},\n\n{'text': '\\n'}]\n\n\nНо мы не можем подать UDPipe на вход всю цепочку, а должны указать какой-то лучший тег. Как его выбрать? Если ничего не трогать, хочется взять первый, авось сработает. Но теги отсортированы по алфавиту в соответствии с английскими названиями, поэтому наш выбор будет близок к случайному, а некоторые разборы практически лишаются шансов стать первыми.\n\n\nЕсть анализатор, который умеет отдавать лучший вариант, — Pymorphy2. Но с анализом морфологии у него хуже. К тому же, он отдает лучшее слово без учета контекста. Pymorphy2 выдаст только один разбор для «нет директора», «вижу директора» и «директора». Он будет не случайным, а действительно лучшим по вероятностям, которые в pymorphy2 считались на отдельном корпусе текстов. Но некоторый процент неверных разборов боевых текстов будет гарантирован, просто потому что в них вполне могут быть фразы с разными реальным формами: как «вижу директора», так и «директора пришли на встречу», и «нет директора». Бесконтекстная вероятность разбора нам не подходит.\n\n\nКак получить контекстно лучший набор тегов? При помощи анализатора RNNMorph. Про него мало кто слышал, но в прошлом году он выиграл соревнование среди морфологических анализаторов, проводившееся в рамках конференции «Диалог».\n\n\nУ RNNMorph возникает своя проблема: у него нет токенизации. Если Mystem умеет токенизировать сырой текст, то RNNMorph требует на входе список токенов. Чтобы доехать до синтаксиса, придется сначала применить какой-то внешний токенизатор, потом отдать результат RNNMorph и только потом полученную морфологию скормить синтаксическому парсеру. \n\n\nВот какие варианты у нас есть. Не будем пока отказываться от бесконтекстного разбора в pymorphy2 поверх спорных случаев в Mystem — вдруг он от RNNMorph отстанет не сильно. Хотя если сравнивать их чисто на уровне качества морфологической разметки (данные с MorphoRuEval-2017), то проигрыш получается значительный — порядка 15%, если считать accuracy по словам.\n\nДальше нам нужно конвертировать выдачу Mystem в тот формат, который понимает UDPipe, — conllu. И это опять проблема, даже целых две. Чисто техническая — строки не совпадают. И концептуальная — не всегда до конца понятно, как их сопоставить. Сталкиваясь с двумя разными разметками языковых данных, вы почти наверняка упретесь в проблему соответствия тегов, см. примеры ниже. Ответы на вопрос «какой тег здесь правильный» могут быть разные, и, вероятно, правильный ответ зависит от задачи. Из-за такой непоследовательности сопоставление систем разметок — само по себе непростая задача.\n\n\nКак конвертировать? Есть russian_tagsets_package — пакет для Python, который умеет конвертировать разные форматы. Там нет перевода из формата выдачи Mystem в Conllu, который принят в Universal Dependencies, но зато есть перевод в conllu, например, из формата разметки национального корпуса русского языка (и обратно). Автор пакета (кстати, он же автор pymorphy2) прямо в документации написал замечательную вещь: «Если вы можете не пользоваться этим пакетом, не пользуйтесь им». Он сделал это не потому, что криворукий программист (он превосходный программист!), а потому что если вам надо конвертировать одно в другое, то вы рискуете получить проблемы из-за лингвистического несоответствия конвенций разметок.\n\n\nВот пример. В школе учили «категории состояния» (холодно, нужно). Одни говорят — это наречие, другие — прилагательное. Вам нужно это конвертировать, и вы дописываете какие-то правила, но все равно не добиваетесь однозначного соответствия между одним форматом и другим.\n\n\nДругой пример: залог (либо кто-то что-то делал, либо с кем-то что-то сделали). «Петя кого-то убил» или «Петя был убит». «Вася фотографирует» — «Вася фотографируется» (т.е. на самом деле «Васю фотографируют»). В SynTagRus есть еще медиальный залог — не будем даже углубляться в то, что это и почему. А в Mystem его нет. Если нужно как-то один формат привести к другому, это тупик.\n\n\nМы более-менее честно воспользовались советом автора пакета russian_tagsets — не использовали его разработку, потому что не нашли нужной пары в списке соответствий форматов. В итоге мы написали свой кастомный конвертер из Mystem в Conllu и поехали дальше. \n\nСоединяем сторонний теггер и парсер UDPipe\n\nПосле всех приключений мы взяли три алгоритма, про которые рассказывали выше:\n\n\nbaseline UDPipe\n\nMystem с дизамбигуацией тегов от pymorphy2\n\nRNNMorph\n\n\n\n\n\n\nМы потеряли в качестве по довольно понятной причине. Мы брали модель UDPipe, обученную на одной морфологии, но подсовывали на вход другую морфологию. Классическая проблема несоответствия данных трейна и теста — отсюда и падение качества.\n\n\nМы пытались наши автоматические инструменты морфологической разметки привести в соответствие с разметкой SynTagRus, который размечен вручную. У нас не получилось, поэтому в обучающем корпусе SynTagRus мы заменим всю ручную морфологическую разметку на полученную из Mystem и pymorphy2 в одном случае и из RNNMorph в другом. В размеченном руками валидированном корпусе мы вынуждены менять ручную разметку на автоматическую, потому что «в бою» мы никогда не получим ручную разметку.\n\n\nВ итоге мы обучили парсер UDPipe (только парсер) с такими же гиперпараметрами, как у baseline. То, что отвечало за синтаксис, — ID вершины, от кого зависит и тип связи — мы оставили, все остальное поменяли.\n\nРезультаты\n\nДальше буду сравнивать нас с Syntaxnet и остальными алгоритмами. Организаторы CoNLL Shared Task зарелизили разбиение SynTagRus (train/dev/test 80/10/10). Мы изначально взяли другое (train/test 70/30), поэтому у нас не всегда совпадают данные, хотя они и получены на том же корпусе. Кроме того, мы взяли последний (по состоянию на февраль-март) релиз из репозитория SynTagRus — эта версия немного отличается от той, что была на соревновании. Данные для того, что у нас не взлетело, приводятся по статьям, где сплит был такой же, как на соревновании — такие алгоритмы помечены в таблице звездочкой.\n\n\nВот итоговые результаты:\n\n\n\nRNNMorph действительно оказался лучше — не в абсолютном смысле, а в роли вспомогательного инструмента для получения общей метрики по итогам синтаксического анализа (по сравнению с Mystem + pymorphy2). То есть чем лучше морфология, тем лучше синтаксис, но при этом «синтаксический» отрыв значительно меньше морфологического. Заметим также, что мы не очень далеко уехали от baseline-модели, а значит, в морфологии на самом деле лежало не так много, как мы предполагали.\n\n\nИнтересно, много ли вообще лежит на морфологии? Можно ли добиться принципиального улучшения синтаксического парсера за счет идеальной морфологии? Чтобы ответить на этот вопрос, мы прогнали UDPipe 2.0 на идеально выверенной (на стандарте ручной разметки) токенизации и морфологии. Получился некоторый отрыв (см. в таблице строчку про Gold Morph; получается +1.54% от RNNMorph_reannotated_syntax) от того, что было у нас, в том числе, с точки зрения верного определения типа связи. Если кто-то когда-то напишет абсолютно идеальный морфологический анализатор русского языка, вероятно, результаты, которые мы получим, используя абстрактный синтаксический парсер, тоже вырастут. И мы примерно понимаем потолок (по крайней мере, потолок по той архитектуре и по тому сочетанию параметров, которое мы использовали для UDPipe, — он приведен в третьей строке таблицы выше).\n\n\nИнтересно, что мы почти дотянулись по метрике LAS до версии Syntaxnet. Понятно, что у нас немного разные данные, но в принципе все равно сопоставимо. У Syntaxnet токенизация «золотая», а у нас — от Mystem. Мы написали вышеупомянутую обертку к Mystem, но разбор все равно проходит автоматически; вероятно, Mystem тоже где-то ошибается. Из строчки таблицы «UDPipe 2.0 gold tok» видно, что если взять дефолтный UDPipe и золотую токенизацию, то он все равно немного проигрывает Syntaxnet-2017. Но зато работает намного быстрее.\n\n\nДо чего не дотянулся никто, так это до стенфордского парсера. Он устроен так же, как Syntaxnet, поэтому работает долго. В UDPipe мы идем просто по стеку. В архитектуре стенфордского парсера и Syntaxnet заложена другая концепия: сначала они генерируют полный ориентированный граф, и дальше работа алгоритма состоит в том, чтобы оставить тот скелет (минимальное остовное дерево), который будет наиболее вероятным. Для этого он перебирает комбинации, а этот перебор уже не линеен, потому что к одному слову вы будете обращаться не единожды. Несмотря на то, что это долго, с точки зрения чистой науки, по крайней мере для русского языка, — это более эффективная архитектура. Мы пытались поднять эту академическую разработку два дня — увы, не получилось. Но исходя из его архитектуры понятно, что работает он не быстро.\n\n\nЧто касается нашего подхода — хотя мы формально по метрикам почти не поднялись, зато у нас теперь с «мамой» все в порядке.\n\n\n\n\nВо фразе «переведи маме сто рублей» у нас «переведи» — действительно глагол в повелительном наклонении. «Мама» получила свой дательный падеж. И самое главное для нас — наша метка (iobj) косвенный объект (адресат). Хотя прирост по цифрам незначительный, мы хорошо справились с той проблемой, с которой задача начиналась.\n\nBonus track: пунктуация\n\nЕсли вернуться к реальным данным, то выясняется, что синтаксис зависит от пунктуации. Возьмем фразу «казнить нельзя помиловать». Что именно нельзя — «казнить» или «помиловать» — зависит от того, где стоит запятая. Даже если мы посадим лингвиста размечать данные, ему нужна будет пунктуация как некоторый вспомогательный инструмент. Без нее он не справится.\n\n\nВозьмем фразы «Петя привет» и «Петя, привет» и посмотрим на их разбор baseline-UDPipe моделью. Оставим за скобками проблемы того, что, если верить этой модели, то:\n\n1) «Петя» — это существительное женского рода;\n\n2) «Петя» — это (судя по набору тегов) начальная форма, но при этом лемма у него якобы не «Петя».\n\n\nВот как меняется результат из-за запятой, с ее помощью мы получаем нечто похожее на правду.\n\n\n\n\nВо втором случае «Петя» — это субъект, а «привет» — это глагол. Вернемся к предсказанию формы слова на основании последних четырех символов. В трактовке алгоритма это не «Петя привет», а «Петя привёт». Типа «Петя поет» или «Петя придет». Разбор довольно понятный: в русском языке запятой между подлежащим и сказуемым быть не может. Поэтому если запятая стоит, это слово «привет», а если запятой нет, это вполне может быть что-то вроде «Петя привёт».\n\n\nСталкиваться с этим на продакшене мы будем достаточно часто, потому что орфографию спеллчекеры исправят, а пунктуацию — нет. Что еще хуже, пользователь может неправильно ставить запятые, и наш алгоритм будет учитывать их в понимании естественного языка. Какие здесь есть возможные решения? Мы видим два варианта.\n\n\nПервый вариант — сделать так, как иногда делают при переводе речи в текст. Изначально в таком тексте нет никакой пунктуации, поэтому она восстанавливается через модель. На выходе получается относительно грамотный с точки зрения правил русского языка материал, который помогает корректно работать синтаксическому парсеру.\n\n\nВторая идея несколько более смелая и противоречащая школьным урокам русского языка. Она предполагает работу без пунктуации: если вдруг входные данные будут с пунктуацией, мы ее оттуда уберем. Из обучающего корпуса тоже удалим абсолютно всю пунктуацию. Будем считать, что русский язык существует без пунктуации. Только точки для разделения на предложения.\n\n\nТехнически это довольно просто, потому что мы никак не меняем в синтаксическом дереве неконечные узлы. У нас не может быть такого, что знак пунктуации — это вершина. Это всегда некоторый конечный узел, кроме знака %, который почему-то в SynTagRus является вершиной для предшествующего числительного (50% в SynTagRus размечено как % — вершина, а 50 — зависимое).\n\n\nПроведем тесты с использованием Mystem (+pymorphy 2) модели.\n\n\n\n\nНам критически важно не дать модели без пунктуации текст с пунктуацией. Но зато если мы всегда будем давать текст без пунктуации, то мы будем оказываться в рамках верхней строчки и получать как минимум приемлемые результаты. Если текст без пунктуации и модель будет работать непунктуационная, то относительно идеальной пунктуации и пунктуационной модели получится падение всего примерно в 3%.\n\n\nЧто с этим делать? Мы можем остановиться на этих цифрах — полученных с помощью беспунктуационной модели и чистки пунктуации. Или придумать какой-то классификатор, чтобы восстанавливать пунктуацию. Идеальных цифр (тех, что с пунктуацией на пунктуационной модели) мы уже не добьемся, потому что алгоритм восстановления пунктуации работает с некоторой погрешностью, а «идеальные» цифры были рассчитаны на абсолютно чистом SynTagRus. Но если мы будем писать модель, восстанавливающую пунктуацию, окупит ли прогресс наши затраты? Ответ пока неочевиден.\n\n\nМы можем долго размышлять про архитектуру парсера, но должны помнить, что на самом деле пока нет большого синтаксически размеченного корпуса веб-текстов. Его существование помогло бы лучше решать реальные задачи. Пока что мы учимся на корпусах абсолютно грамотных, отредактированных текстов — и теряем в качестве, получая на бою пользовательские тексты, которые зачастую написаны неграмотно.\n\nЗаключение\n\nМы рассмотрели использование различных алгоритмов синтаксического парсинга, основанного на грамматике зависимостей, применительно к русскому языку. Оказалось, что с точки зрения скорости, удобства и качества работы наилучшим инструментом оказался UDPipe. Его baseline-модель можно улучшить, если отдать этапы токенизации и морфологического анализа на откуп другим, сторонним, анализаторам: такой трюк даёт возможность исправлять некорректное поведение теггера и, как следствие, парсера в важных для анализа случаях.\n\n\nТакже мы проанализировали проблему взаимосвязи пунктуации и парсинга и пришли к выводу, что в нашем случае пунктуацию перед синтаксическим парсингом лучше удалять.\n\n\nНадеемся, что прикладные моменты, разобранные в нашей статье, помогут использовать синтаксический парсинг для решения ваших задач максимально эффективно.\n\nАвтор благодарит за помощь в подготовке статьи Никиту Кузнецова и Наталью Филиппову; за помощь в исследовании — Антона Алексеева, Никиту Кузнецова, Андрея Кутузова, Бориса Орехова и Михаила Попова.    Tags: парсерыкомпьютерная лингвистикасинтаксисUDPipedependency parsingnlp Hubs: Сбер corporate blogProgrammingMachine learningArtificial Intelligence          \n\n\n"
}